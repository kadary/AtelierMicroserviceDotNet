services:
  # Identity Server
  identity-server:
    image: identity-server
    container_name: identity-server
    build:
      context: .
      dockerfile: src/IdentityServer/Dockerfile
    ports:
      - "5004:5004"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5004
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=identity-server
    networks:
      - microservices-network
    volumes:
      - ./logs:/app/logs

  # API Gateway
  api-gateway:
    image: api-gateway
    container_name: api-gateway
    build:
      context: .
      dockerfile: src/ApiGateway/Dockerfile
    ports:
      - "8080:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=api-gateway
    depends_on:
      - product-service
      - order-service
      - notification-service
      - otel-collector
    networks:
      - microservices-network
    volumes:
      - ./logs:/app/logs

  # Product Service
  product-service:
    image: product-service
    container_name: product-service
    build:
      context: .
      dockerfile: src/ProductService/Dockerfile
    ports:
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=product-service
    depends_on:
      - otel-collector
    networks:
      - microservices-network
    volumes:
      - ./logs:/app/logs

  # Order Service
  order-service:
    image: order-service
    container_name: order-service
    build:
      context: .
      dockerfile: src/OrderService/Dockerfile
    ports:
      - "5002:5002"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5002
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=order-service
    depends_on:
      - rabbitmq
      - otel-collector
    networks:
      - microservices-network
    volumes:
      - ./logs:/app/logs

  # Notification Service
  notification-service:
    image: notification-service
    container_name: notification-service
    build:
      context: .
      dockerfile: src/NotificationService/Dockerfile
    ports:
      - "5003:5003"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5003
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=notification-service
    depends_on:
      - rabbitmq
      - otel-collector
    networks:
      - microservices-network
    volumes:
      - ./logs:/app/logs

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - microservices-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Metrics
      - "8889:8889"   # Prometheus exporter
    networks:
      - microservices-network
    depends_on:
      - prometheus
      - tempo
      - loki

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - microservices-network

  # Loki (Logs)
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    user: root
    volumes:
      - ./observability/loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - microservices-network

  # Tempo (Traces)
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    user: root
    volumes:
      - ./observability/tempo-config.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200"   # tempo
      - "4319:4317"   # otlp grpc (external:internal)
    networks:
      - microservices-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      - prometheus
      - loki
      - tempo

networks:
  microservices-network:
    driver: bridge

volumes:
  rabbitmq-data:
  prometheus-data:
  tempo-data:
  grafana-data:
